---
import { getCollection } from "astro:content";

interface Tabs {
  tabs?: Array<string>;
  onClick?: () => void;
}

const { tabs = [], onClick } = Astro.props;
const baseUrl = import.meta.env.BASE_URL;

// 获取各个集合的内容
const novelEntries = await getCollection("novel");
const techEntries = await getCollection("tech");

// 过滤出真正的小说（标记为 isNovel: true 的条目）
const actualNovels = novelEntries.filter(entry => entry.data.isNovel);

// 创建tab数据映射
const tabData: Record<string, any[]> = {
  "技术": techEntries,
  "小说": actualNovels
};
---

<nav class="tabs-nav">
  {
    tabs.map((el: string, index: number) => {
      return (
        <a class="nav-item" href="javascript:void(0);" data-tab={el} data-index={index}>
          {el}
        </a>
      );
    })
  }
</nav>

<div class="tab-content">
  {
    tabs.map((tabName: string, index: number) => {
      const entries = tabData[tabName] || [];
      return (
        <div class={`tab-panel ${index === 0 ? 'active' : ''}`} data-tab={tabName}>
          <ul class="content-list">
            {entries.length > 0 ? (
              entries.map((entry: any) => (
                <li class="content-item">
                  <a 
                    href={entry.data.isNovel ? `${baseUrl}/novel/${entry.slug}` : `${baseUrl}/${entry.collection}/${entry.slug}`} 
                    class="content-link"
                  >
                    <div class="content-header">
                      <h3>{entry.data.title}</h3>
                      {entry.data.isNovel && entry.data.status && (
                        <span class={`status-badge status-${entry.data.status}`}>
                          {entry.data.status}
                        </span>
                      )}
                    </div>
                    {entry.data.author && (
                      <p class="content-author">作者：{entry.data.author}</p>
                    )}
                    {entry.data.description && (
                      <p class="content-description">{entry.data.description}</p>
                    )}
                    {entry.data.tags && (
                      <div class="tags">
                        {entry.data.tags.map((tag: string) => (
                          <a href={`${baseUrl}/tags/${tag}`} class="tag">{tag}</a>
                        ))}
                      </div>
                    )}
                  </a>
                </li>
              ))
            ) : (
              <li class="content-item empty">
                <p>暂无内容</p>
              </li>
            )}
          </ul>
        </div>
      );
    })
  }
</div>

<style scoped>
  .tabs-nav {
    display: flex;
    justify-content: space-between;
    text-align: center;
    padding: 0.5rem;
    color: var(--var_off-white);
    background-color: var(--var_pitch-black);
    outline: var(--var_border-width) solid var(--var_off-white);
    outline-offset: calc(0px - var(--var_border-width) * 3);
  }

  .tabs-nav .nav-item {
    flex: 1;
    color: var(--var_off-white);
    text-decoration: none;
  }

  .tabs-nav .nav-item.active {
    border-radius: var(--var_border-width);
    background-color: var(--var_red);
  }

  .tab-content {
    margin-top: 1rem;
    background-color: transparent;
  }

  .tab-panel {
    display: none;
    background-color: transparent;
  }

  .tab-panel.active {
    display: block;
    background-color: transparent;
  }

  .content-list {
    list-style: none;
    padding: 0;
    margin: 0;
    text-align: left;
    line-height: 0;
  }

  .content-item {
    display: inline-block;
    margin: 0.1rem;
    padding: 0.5rem;
    background-color: var(--var_background-color);
    border: var(--var_border-width) solid var(--var_pitch-black);
    transition: all 0.3s ease;
    vertical-align: top;
    width: auto;
    max-width: 250px;
    min-width: 150px;
  }

  .content-item:hover {
    background-color: var(--var_off-white);
    cursor: pointer;
  }

  .content-link {
    text-decoration: none;
    color: var(--var_pitch-black);
    display: block;
    line-height: 1.2;
  }

  .content-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.3rem;
    gap: 0.5rem;
  }

  .content-item h3 {
    margin: 0;
    font-size: var(--step-0);
    font-weight: bold;
    line-height: 1.2;
    flex: 1;
  }

  .status-badge {
    padding: 0.1rem 0.4rem;
    border-radius: 8px;
    font-size: var(--step--2);
    font-weight: bold;
    white-space: nowrap;
    line-height: 1;
  }

  .status-连载中 {
    background: var(--var_red);
    color: var(--var_off-white);
  }

  .status-已完结 {
    background: var(--var_pitch-black);
    color: var(--var_off-white);
  }

  .status-暂停 {
    background: var(--var_border-color);
    color: var(--var_pitch-black);
  }

  .content-author {
    margin: 0 0 0.3rem 0;
    color: #666;
    font-size: var(--step--1);
    line-height: 1.2;
  }

  .content-description {
    margin: 0 0 0.3rem 0;
    color: #555;
    font-size: var(--step--1);
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .tags {
    display: flex;
    gap: 0.3rem;
    flex-wrap: wrap;
    margin-top: 0.3rem;
  }

  .tag {
    background-color: var(--var_red);
    color: var(--var_off-white);
    padding: 0.1rem 0.3rem;
    border-radius: 0.1rem;
    font-size: var(--step--2);
    line-height: 1;
    text-decoration: none;
    display: inline-block;
    transition: all 0.2s ease;
  }

  .tag:hover {
    background-color: var(--var_pitch-black);
    transform: translateY(-1px);
  }

  .content-item.empty {
    text-align: center;
    color: var(--var_pitch-black);
    opacity: 0.6;
    background-color: var(--var_background-color);
  }

  /* 响应式设计 */
  @media (width < 1280px) {
    .content-list {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .content-item {
      display: block;
      max-width: none;
      min-width: auto;
      width: 100%;
      margin: 0;
    }
  }

  @media (width < 760px) {
    .content-item {
      padding: 0.8rem;
    }

    .content-item h3 {
      font-size: var(--step--1);
    }

    .tag {
      font-size: var(--step--2);
      padding: 0.1rem 0.2rem;
    }
  }
</style>

<script define:vars={{ onClick }}>
  const switchTab = (event) => {
    const target = event.target;
    onClick?.();
    if (!target) {
      return;
    }

    const tabName = target.getAttribute('data-tab');
    if (!tabName) return;

    // 移除所有nav-item的active类
    const navItems = document.querySelectorAll(".nav-item");
    navItems.forEach((el) => {
      el.classList.remove("active");
    });

    // 添加active类到当前点击的tab
    target.classList.add("active");

    // 隐藏所有tab面板
    const tabPanels = document.querySelectorAll(".tab-panel");
    tabPanels.forEach((panel) => {
      panel.classList.remove("active");
    });

    // 显示对应的tab面板
    const activePanel = document.querySelector(`.tab-panel[data-tab="${tabName}"]`);
    if (activePanel) {
      activePanel.classList.add("active");
    }
  };

  // 初始化：设置第一个tab为active
  document.addEventListener('DOMContentLoaded', () => {
    const firstNavItem = document.querySelector(".nav-item");
    if (firstNavItem) {
      firstNavItem.classList.add("active");
    }
  });

  const navItems = document.querySelectorAll(".nav-item");
  navItems.forEach((el) => {
    el.addEventListener("click", switchTab);
  });
</script>
