---
export interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}

const { headings } = Astro.props;

// 过滤掉深度为1的标题（通常是文章主标题）
const tocHeadings = headings.filter(heading => heading.depth > 1 && heading.depth <= 4);
---

{tocHeadings.length > 0 && (
  <div class="toc-container">
    <!-- 移动端顶部折叠按钮 -->
    <button class="toc-toggle" id="toc-toggle" aria-label="切换目录">
      <span class="toc-toggle-icon">📋</span>
      <span class="toc-toggle-text">目录</span>
      <span class="toc-toggle-arrow">▼</span>
    </button>

    <!-- 目录内容 -->
    <nav class="toc" id="toc-nav" aria-label="文章目录">
      <div class="toc-header">
        <h3 class="toc-title">📖 文章目录</h3>
        <button class="toc-close" id="toc-close" aria-label="关闭目录">✕</button>
      </div>
      
      <ul class="toc-list">
        {tocHeadings.map((heading) => (
          <li class={`toc-item toc-level-${heading.depth}`}>
            <a href={`#${heading.slug}`} class="toc-link" data-target={heading.slug}>
              <span class="toc-bullet"></span>
              <span class="toc-text">{heading.text}</span>
            </a>
          </li>
        ))}
      </ul>

      <!-- 进度条 -->
      <div class="toc-progress">
        <div class="toc-progress-bar" id="toc-progress-bar"></div>
      </div>
    </nav>

    <!-- 遮罩层（移动端） -->
    <div class="toc-overlay" id="toc-overlay"></div>
  </div>
)}

<style>
  .toc-container {
    position: relative;
    z-index: 100;
  }

  /* 移动端顶部折叠按钮 */
  .toc-toggle {
    display: none;
    position: fixed;
    top: 1rem;
    right: 1rem;
    background-color: rgba(245, 245, 220, 0.95);
    color: var(--var_pitch-black);
    border: 1px solid rgba(181, 181, 181, 0.3);
    border-radius: 6px;
    padding: 0.4rem 0.8rem;
    font-size: var(--step--1);
    font-weight: 500;
    cursor: pointer;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    z-index: 1001;
    align-items: center;
    gap: 0.4rem;
    backdrop-filter: blur(8px);
  }

  .toc-toggle:hover {
    background-color: rgba(245, 245, 220, 1);
    border-color: rgba(181, 181, 181, 0.5);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .toc-toggle-icon {
    font-size: 1.2em;
  }

  .toc-toggle-arrow {
    transition: transform 0.3s ease;
    font-size: 0.8em;
  }

  .toc-toggle.active .toc-toggle-arrow {
    transform: rotate(180deg);
  }

  /* 桌面端左侧目录 - 根据内容定位 */
  .toc {
    position: relative;
    width: 100%;
    max-width: 280px;
    background-color: var(--var_off-white);
    border: 2px solid var(--var_pitch-black);
    border-radius: 12px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    transition: all 0.3s ease;
    box-sizing: border-box;
  }

  .toc-header {
    background-color: var(--var_red);
    color: var(--var_off-white);
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 2px solid var(--var_pitch-black);
  }

  .toc-title {
    font-size: var(--step-0);
    font-weight: 700;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .toc-close {
    display: none;
    background: none;
    border: none;
    color: var(--var_off-white);
    font-size: 1.2rem;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: background-color 0.2s ease;
  }

  .toc-close:hover {
    background-color: rgba(255, 255, 255, 0.2);
  }

  .toc-list {
    list-style: none;
    margin: 0;
    padding: 1rem;
    max-height: calc(100vh - 200px);
    overflow-y: auto;
  }

  .toc-item {
    margin: 0.5rem 0;
  }

  .toc-level-2 {
    padding-left: 0;
  }

  .toc-level-3 {
    padding-left: 1rem;
  }

  .toc-level-4 {
    padding-left: 2rem;
  }

  .toc-link {
    color: var(--var_pitch-black);
    text-decoration: none;
    font-size: var(--step--1);
    line-height: 1.4;
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    padding: 0.5rem;
    border-radius: 6px;
    transition: all 0.2s ease;
    position: relative;
  }

  .toc-link:hover {
    background-color: rgba(155, 27, 48, 0.1);
    color: var(--var_red);
    transform: translateX(4px);
  }

  .toc-link.active {
    background-color: var(--var_red);
    color: var(--var_off-white);
    font-weight: 600;
  }

  .toc-bullet {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background-color: var(--var_red);
    margin-top: 0.4rem;
    flex-shrink: 0;
    transition: all 0.2s ease;
  }

  .toc-link:hover .toc-bullet {
    background-color: var(--var_red);
    transform: scale(1.3);
  }

  .toc-link.active .toc-bullet {
    background-color: var(--var_off-white);
  }

  .toc-level-3 .toc-bullet {
    background-color: var(--var_border-color);
  }

  .toc-level-4 .toc-bullet {
    background-color: var(--var_border-color);
    width: 4px;
    height: 4px;
  }

  .toc-text {
  flex: 1;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

  /* 进度条 */
  .toc-progress {
    height: 4px;
    background-color: rgba(51, 51, 51, 0.1);
    position: relative;
  }

  .toc-progress-bar {
    height: 100%;
    background-color: var(--var_red);
    width: 0%;
    transition: width 0.3s ease;
  }

  /* 遮罩层 */
  .toc-overlay {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 999;
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
}

  .toc-overlay.active {
  opacity: 1;
  pointer-events: auto;
}

  /* 滚动条样式 */
  .toc-list::-webkit-scrollbar {
    width: 6px;
  }

  .toc-list::-webkit-scrollbar-track {
    background: rgba(181, 181, 181, 0.1);
    border-radius: 3px;
  }

  .toc-list::-webkit-scrollbar-thumb {
    background: var(--var_border-color);
    border-radius: 3px;
  }

  .toc-list::-webkit-scrollbar-thumb:hover {
    background: var(--var_pitch-black);
  }

  /* 当屏幕宽度不足以同时显示文章和目录时，隐藏左侧目录 */
  @media (max-width: 1199px) {
    .toc {
      display: none;
    }

    .toc-toggle {
      display: flex;
    }
  }

  /* 移动端样式 */
  @media (max-width: 768px) {
    .toc-toggle {
      display: flex;
    }

    .toc {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      max-height: 100vh;
      transform: translateY(-100%);
      border-radius: 0;
      z-index: 1000;
    }

    .toc.active {
      transform: translateY(0);
    }

    .toc-close {
      display: block;
    }

    .toc-header {
      padding: 1.5rem 1rem;
    }

    .toc-list {
      padding: 1rem;
      max-height: calc(100vh - 120px);
    }

    .toc-overlay {
      display: block;
    }

    .toc-link {
      padding: 0.75rem 0.5rem;
      font-size: var(--step-0);
    }
  }

  /* 超小屏幕优化 */
  @media (max-width: 480px) {
    .toc-toggle {
      top: 0.5rem;
      right: 0.5rem;
      padding: 0.4rem 0.8rem;
      font-size: var(--step--2);
    }

    .toc-toggle-text {
      display: none;
    }

    .toc-header {
      padding: 1rem;
    }

    .toc-title {
      font-size: var(--step--1);
    }
  }

  /* 大屏幕时显示左侧目录，小屏幕时使用折叠模式 */
  @media (min-width: 1200px) {
    .toc-toggle {
      display: none;
    }
  }

  @media (max-width: 1600px) {
    .toc.active {
      display: block;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      max-height: 100vh;
      transform: translateY(0);
      border-radius: 0;
    }

    .toc-close {
      display: block;
    }

    .toc-overlay {
      display: block;
    }
  }
</style>

<script>
  // 目录交互功能
  document.addEventListener('DOMContentLoaded', function() {
    const tocToggle = document.getElementById('toc-toggle');
    const tocNav = document.getElementById('toc-nav');
    const tocClose = document.getElementById('toc-close');
    const tocOverlay = document.getElementById('toc-overlay');
    const tocLinks = document.querySelectorAll('.toc-link');
    const progressBar = document.getElementById('toc-progress-bar');

    // 切换目录显示
    function toggleToc() {
      if (tocNav && tocToggle && tocOverlay) {
        const isActive = tocNav.classList.contains('active');
        
        if (isActive) {
          tocNav.classList.remove('active');
          tocToggle.classList.remove('active');
          tocOverlay.classList.remove('active');
          document.body.style.overflow = '';
        } else {
          tocNav.classList.add('active');
          tocToggle.classList.add('active');
          tocOverlay.classList.add('active');
          document.body.style.overflow = 'hidden';
        }
      }
    }

    // 关闭目录
    function closeToc() {
      if (tocNav && tocToggle && tocOverlay) {
        tocNav.classList.remove('active');
        tocToggle.classList.remove('active');
        tocOverlay.classList.remove('active');
        document.body.style.overflow = '';
      }
    }

    // 绑定事件
    tocToggle?.addEventListener('click', toggleToc);
    tocClose?.addEventListener('click', closeToc);
    tocOverlay?.addEventListener('click', closeToc);

    // 点击目录链接后关闭移动端目录
    tocLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (window.innerWidth <= 1199) {
          setTimeout(closeToc, 300); // 延迟关闭，让滚动动画完成
        }
      });
    });

    // 高亮当前章节
    function updateActiveLink() {
      const headings = document.querySelectorAll('h2, h3, h4, h5, h6');
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      
      let current = '';
      headings.forEach(heading => {
        const rect = heading.getBoundingClientRect();
        if (rect.top <= 100) {
          current = heading.id;
        }
      });

      tocLinks.forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('data-target') === current) {
          link.classList.add('active');
        }
      });
    }

    // 更新阅读进度
    function updateProgress() {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;
      const progress = (scrollTop / scrollHeight) * 100;
      
      if (progressBar) {
        progressBar.style.width = Math.min(progress, 100) + '%';
      }
    }

    // 滚动事件监听
    let ticking = false;
    function onScroll() {
      if (!ticking) {
        requestAnimationFrame(() => {
          updateActiveLink();
          updateProgress();
          ticking = false;
        });
        ticking = true;
      }
    }

    window.addEventListener('scroll', onScroll);
    
    // 初始化
    updateActiveLink();
    updateProgress();

    // 响应式处理
    function handleResize() {
      if (window.innerWidth > 1600) {
        closeToc();
      }
    }

    window.addEventListener('resize', handleResize);

    // ESC键关闭目录
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeToc();
      }
    });
  });
</script>